<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="410" onload="init(evt)" viewBox="0 0 1200 410" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="410" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python multi_file_extractor.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="399.00"> </text><svg id="frames" x="10" width="1180" total_samples="659996"><g><title>_worker (concurrent\futures\thread.py:75) (58,461 samples, 8.86%)</title><rect x="0.0115%" y="116" width="8.8578%" height="15" fill="rgb(227,0,7)" fg:x="76" fg:w="58461"/><text x="0.2615%" y="126.50">_worker (conc..</text></g><g><title>parse_row (multi_file_extractor.py:103) (872 samples, 0.13%)</title><rect x="8.9617%" y="148" width="0.1321%" height="15" fill="rgb(217,0,24)" fg:x="59147" fg:w="872"/><text x="9.2117%" y="158.50"></text></g><g><title>parse_row (multi_file_extractor.py:114) (667 samples, 0.10%)</title><rect x="9.1504%" y="148" width="0.1011%" height="15" fill="rgb(221,193,54)" fg:x="60392" fg:w="667"/><text x="9.4004%" y="158.50"></text></g><g><title>parse_row (multi_file_extractor.py:121) (2,630 samples, 0.40%)</title><rect x="9.2519%" y="148" width="0.3985%" height="15" fill="rgb(248,212,6)" fg:x="61062" fg:w="2630"/><text x="9.5019%" y="158.50"></text></g><g><title>parse_row (multi_file_extractor.py:122) (5,052 samples, 0.77%)</title><rect x="9.6504%" y="148" width="0.7655%" height="15" fill="rgb(208,68,35)" fg:x="63692" fg:w="5052"/><text x="9.9004%" y="158.50"></text></g><g><title>&lt;genexpr&gt; (csv.py:151) (8,744 samples, 1.32%)</title><rect x="58.9766%" y="180" width="1.3249%" height="15" fill="rgb(232,128,0)" fg:x="389243" fg:w="8744"/><text x="59.2266%" y="190.50"></text></g><g><title>_dict_to_list (csv.py:147) (6,278 samples, 0.95%)</title><rect x="60.3942%" y="180" width="0.9512%" height="15" fill="rgb(207,160,47)" fg:x="398599" fg:w="6278"/><text x="60.6442%" y="190.50"></text></g><g><title>_dict_to_list (csv.py:151) (2,213 samples, 0.34%)</title><rect x="61.3820%" y="180" width="0.3353%" height="15" fill="rgb(228,23,34)" fg:x="405119" fg:w="2213"/><text x="61.6320%" y="190.50"></text></g><g><title>parse_row (multi_file_extractor.py:124) (350,197 samples, 53.06%)</title><rect x="10.4158%" y="148" width="53.0605%" height="15" fill="rgb(218,30,26)" fg:x="68744" fg:w="350197"/><text x="10.6658%" y="158.50">parse_row (multi_file_extractor.py:124)</text></g><g><title>writerow (csv.py:154) (348,607 samples, 52.82%)</title><rect x="10.6567%" y="164" width="52.8196%" height="15" fill="rgb(220,122,19)" fg:x="70334" fg:w="348607"/><text x="10.9067%" y="174.50">writerow (csv.py:154)</text></g><g><title>encode (encodings\cp1252.py:19) (11,558 samples, 1.75%)</title><rect x="61.7251%" y="180" width="1.7512%" height="15" fill="rgb(250,228,42)" fg:x="407383" fg:w="11558"/><text x="61.9751%" y="190.50"></text></g><g><title>parse_row (multi_file_extractor.py:52) (10,426 samples, 1.58%)</title><rect x="63.4948%" y="148" width="1.5797%" height="15" fill="rgb(240,193,28)" fg:x="419063" fg:w="10426"/><text x="63.7448%" y="158.50"></text></g><g><title>decode (encodings\cp1252.py:23) (700 samples, 0.11%)</title><rect x="64.9684%" y="164" width="0.1061%" height="15" fill="rgb(216,20,37)" fg:x="428789" fg:w="700"/><text x="65.2184%" y="174.50"></text></g><g><title>__next__ (csv.py:111) (12,353 samples, 1.87%)</title><rect x="65.3686%" y="180" width="1.8717%" height="15" fill="rgb(206,188,39)" fg:x="431430" fg:w="12353"/><text x="65.6186%" y="190.50">_..</text></g><g><title>__next__ (csv.py:119) (4,826 samples, 0.73%)</title><rect x="67.3631%" y="180" width="0.7312%" height="15" fill="rgb(217,207,13)" fg:x="444594" fg:w="4826"/><text x="67.6131%" y="190.50"></text></g><g><title>__next__ (csv.py:120) (864 samples, 0.13%)</title><rect x="68.0944%" y="180" width="0.1309%" height="15" fill="rgb(231,73,38)" fg:x="449420" fg:w="864"/><text x="68.3444%" y="190.50"></text></g><g><title>__iter__ (tqdm\std.py:1180) (20,129 samples, 3.05%)</title><rect x="65.2287%" y="164" width="3.0499%" height="15" fill="rgb(225,20,46)" fg:x="430507" fg:w="20129"/><text x="65.4787%" y="174.50">__i..</text></g><g><title>refresh (tqdm\std.py:1345) (99,575 samples, 15.09%)</title><rect x="68.4669%" y="196" width="15.0872%" height="15" fill="rgb(210,31,41)" fg:x="451879" fg:w="99575"/><text x="68.7169%" y="206.50">refresh (tqdm\std.py:13..</text></g><g><title>acquire (tqdm\std.py:106) (99,542 samples, 15.08%)</title><rect x="68.4719%" y="212" width="15.0822%" height="15" fill="rgb(221,200,47)" fg:x="451912" fg:w="99542"/><text x="68.7219%" y="222.50">acquire (tqdm\std.py:10..</text></g><g><title>write_plain_text (colorama\ansitowin32.py:195) (10,938 samples, 1.66%)</title><rect x="83.5858%" y="308" width="1.6573%" height="15" fill="rgb(226,26,5)" fg:x="551663" fg:w="10938"/><text x="83.8358%" y="318.50"></text></g><g><title>write (colorama\ansitowin32.py:162) (11,044 samples, 1.67%)</title><rect x="83.5744%" y="276" width="1.6733%" height="15" fill="rgb(249,33,26)" fg:x="551588" fg:w="11044"/><text x="83.8244%" y="286.50"></text></g><g><title>write_and_convert (colorama\ansitowin32.py:190) (10,981 samples, 1.66%)</title><rect x="83.5840%" y="292" width="1.6638%" height="15" fill="rgb(235,183,28)" fg:x="551651" fg:w="10981"/><text x="83.8340%" y="302.50"></text></g><g><title>moveto (tqdm\std.py:1442) (11,136 samples, 1.69%)</title><rect x="83.5610%" y="228" width="1.6873%" height="15" fill="rgb(221,5,38)" fg:x="551499" fg:w="11136"/><text x="83.8110%" y="238.50"></text></g><g><title>inner (tqdm\utils.py:145) (11,074 samples, 1.68%)</title><rect x="83.5704%" y="244" width="1.6779%" height="15" fill="rgb(247,18,42)" fg:x="551561" fg:w="11074"/><text x="83.8204%" y="254.50"></text></g><g><title>write (colorama\ansitowin32.py:41) (11,062 samples, 1.68%)</title><rect x="83.5722%" y="260" width="1.6761%" height="15" fill="rgb(241,131,45)" fg:x="551573" fg:w="11062"/><text x="83.8222%" y="270.50"></text></g><g><title>display (tqdm\std.py:1493) (11,157 samples, 1.69%)</title><rect x="83.5607%" y="212" width="1.6905%" height="15" fill="rgb(249,31,29)" fg:x="551497" fg:w="11157"/><text x="83.8107%" y="222.50"></text></g><g><title>__str__ (tqdm\std.py:1150) (1,701 samples, 0.26%)</title><rect x="85.2537%" y="228" width="0.2577%" height="15" fill="rgb(225,111,53)" fg:x="562671" fg:w="1701"/><text x="85.5037%" y="238.50"></text></g><g><title>write_plain_text (colorama\ansitowin32.py:195) (13,087 samples, 1.98%)</title><rect x="85.6005%" y="324" width="1.9829%" height="15" fill="rgb(238,160,17)" fg:x="564960" fg:w="13087"/><text x="85.8505%" y="334.50">w..</text></g><g><title>write (colorama\ansitowin32.py:162) (13,245 samples, 2.01%)</title><rect x="85.5796%" y="292" width="2.0068%" height="15" fill="rgb(214,148,48)" fg:x="564822" fg:w="13245"/><text x="85.8296%" y="302.50">w..</text></g><g><title>write_and_convert (colorama\ansitowin32.py:190) (13,118 samples, 1.99%)</title><rect x="85.5989%" y="308" width="1.9876%" height="15" fill="rgb(232,36,49)" fg:x="564949" fg:w="13118"/><text x="85.8489%" y="318.50">w..</text></g><g><title>fp_write (tqdm\std.py:343) (13,297 samples, 2.01%)</title><rect x="85.5723%" y="244" width="2.0147%" height="15" fill="rgb(209,103,24)" fg:x="564774" fg:w="13297"/><text x="85.8223%" y="254.50">f..</text></g><g><title>inner (tqdm\utils.py:145) (13,280 samples, 2.01%)</title><rect x="85.5749%" y="260" width="2.0121%" height="15" fill="rgb(229,88,8)" fg:x="564791" fg:w="13280"/><text x="85.8249%" y="270.50">i..</text></g><g><title>write (colorama\ansitowin32.py:41) (13,264 samples, 2.01%)</title><rect x="85.5773%" y="276" width="2.0097%" height="15" fill="rgb(213,181,19)" fg:x="564807" fg:w="13264"/><text x="85.8273%" y="286.50">w..</text></g><g><title>print_status (tqdm\std.py:350) (13,354 samples, 2.02%)</title><rect x="85.5685%" y="228" width="2.0233%" height="15" fill="rgb(254,191,54)" fg:x="564749" fg:w="13354"/><text x="85.8185%" y="238.50">p..</text></g><g><title>display (tqdm\std.py:1494) (15,456 samples, 2.34%)</title><rect x="85.2511%" y="212" width="2.3418%" height="15" fill="rgb(241,83,37)" fg:x="562654" fg:w="15456"/><text x="85.5011%" y="222.50">d..</text></g><g><title>GetConsoleScreenBufferInfo (colorama\win32.py:105) (31,244 samples, 4.73%)</title><rect x="87.7917%" y="372" width="4.7340%" height="15" fill="rgb(233,36,39)" fg:x="579422" fg:w="31244"/><text x="88.0417%" y="382.50">GetCon..</text></g><g><title>get_position (colorama\winterm.py:86) (31,753 samples, 4.81%)</title><rect x="87.7164%" y="356" width="4.8111%" height="15" fill="rgb(226,3,54)" fg:x="578925" fg:w="31753"/><text x="87.9664%" y="366.50">get_po..</text></g><g><title>cursor_adjust (colorama\winterm.py:107) (31,845 samples, 4.83%)</title><rect x="87.7146%" y="340" width="4.8250%" height="15" fill="rgb(245,192,40)" fg:x="578913" fg:w="31845"/><text x="87.9646%" y="350.50">cursor..</text></g><g><title>write_and_convert (colorama\ansitowin32.py:188) (63,267 samples, 9.59%)</title><rect x="87.6433%" y="292" width="9.5860%" height="15" fill="rgb(238,167,29)" fg:x="578442" fg:w="63267"/><text x="87.8933%" y="302.50">write_and_conv..</text></g><g><title>convert_ansi (colorama\ansitowin32.py:202) (63,024 samples, 9.55%)</title><rect x="87.6801%" y="308" width="9.5491%" height="15" fill="rgb(232,182,51)" fg:x="578685" fg:w="63024"/><text x="87.9301%" y="318.50">convert_ansi (..</text></g><g><title>call_win32 (colorama\ansitowin32.py:242) (62,914 samples, 9.53%)</title><rect x="87.6967%" y="324" width="9.5325%" height="15" fill="rgb(231,60,39)" fg:x="578795" fg:w="62914"/><text x="87.9467%" y="334.50">call_win32 (co..</text></g><g><title>cursor_adjust (colorama\winterm.py:109) (30,935 samples, 4.69%)</title><rect x="92.5421%" y="340" width="4.6871%" height="15" fill="rgb(208,69,12)" fg:x="610774" fg:w="30935"/><text x="92.7921%" y="350.50">curso..</text></g><g><title>SetConsoleCursorPosition (colorama\win32.py:129) (30,148 samples, 4.57%)</title><rect x="92.6613%" y="356" width="4.5679%" height="15" fill="rgb(235,93,37)" fg:x="611561" fg:w="30148"/><text x="92.9113%" y="366.50">SetCo..</text></g><g><title>write (colorama\ansitowin32.py:162) (63,528 samples, 9.63%)</title><rect x="87.6066%" y="276" width="9.6255%" height="15" fill="rgb(213,116,39)" fg:x="578200" fg:w="63528"/><text x="87.8566%" y="286.50">write (coloram..</text></g><g><title>moveto (tqdm\std.py:1442) (63,611 samples, 9.64%)</title><rect x="87.5945%" y="228" width="9.6381%" height="15" fill="rgb(222,207,29)" fg:x="578120" fg:w="63611"/><text x="87.8445%" y="238.50">moveto (tqdm\s..</text></g><g><title>inner (tqdm\utils.py:145) (63,557 samples, 9.63%)</title><rect x="87.6027%" y="244" width="9.6299%" height="15" fill="rgb(206,96,30)" fg:x="578174" fg:w="63557"/><text x="87.8527%" y="254.50">inner (tqdm\ut..</text></g><g><title>write (colorama\ansitowin32.py:41) (63,543 samples, 9.63%)</title><rect x="87.6048%" y="260" width="9.6278%" height="15" fill="rgb(218,138,4)" fg:x="578188" fg:w="63543"/><text x="87.8548%" y="270.50">write (coloram..</text></g><g><title>refresh (tqdm\std.py:1346) (90,335 samples, 13.69%)</title><rect x="83.5541%" y="196" width="13.6872%" height="15" fill="rgb(250,191,14)" fg:x="551454" fg:w="90335"/><text x="83.8041%" y="206.50">refresh (tqdm\std.py:..</text></g><g><title>display (tqdm\std.py:1496) (63,679 samples, 9.65%)</title><rect x="87.5930%" y="212" width="9.6484%" height="15" fill="rgb(239,60,40)" fg:x="578110" fg:w="63679"/><text x="87.8430%" y="222.50">display (tqdm\..</text></g><g><title>update (tqdm\std.py:1241) (190,032 samples, 28.79%)</title><rect x="68.4621%" y="180" width="28.7929%" height="15" fill="rgb(206,27,48)" fg:x="451847" fg:w="190032"/><text x="68.7121%" y="190.50">update (tqdm\std.py:1241)</text></g><g><title>__iter__ (tqdm\std.py:1190) (190,226 samples, 28.82%)</title><rect x="68.4436%" y="164" width="28.8223%" height="15" fill="rgb(225,35,8)" fg:x="451725" fg:w="190226"/><text x="68.6936%" y="174.50">__iter__ (tqdm\std.py:1190)</text></g><g><title>parse_row (multi_file_extractor.py:62) (212,566 samples, 32.21%)</title><rect x="65.0752%" y="148" width="32.2072%" height="15" fill="rgb(250,213,24)" fg:x="429494" fg:w="212566"/><text x="65.3252%" y="158.50">parse_row (multi_file_extractor.py:62)</text></g><g><title>parse_row (multi_file_extractor.py:64) (3,805 samples, 0.58%)</title><rect x="97.2903%" y="148" width="0.5765%" height="15" fill="rgb(247,123,22)" fg:x="642112" fg:w="3805"/><text x="97.5403%" y="158.50"></text></g><g><title>parse_row (multi_file_extractor.py:65) (839 samples, 0.13%)</title><rect x="97.8668%" y="148" width="0.1271%" height="15" fill="rgb(231,138,38)" fg:x="645917" fg:w="839"/><text x="98.1168%" y="158.50"></text></g><g><title>parse_row (multi_file_extractor.py:66) (1,574 samples, 0.24%)</title><rect x="97.9939%" y="148" width="0.2385%" height="15" fill="rgb(231,145,46)" fg:x="646756" fg:w="1574"/><text x="98.2439%" y="158.50"></text></g><g><title>parse_row (multi_file_extractor.py:70) (920 samples, 0.14%)</title><rect x="98.2606%" y="148" width="0.1394%" height="15" fill="rgb(251,118,11)" fg:x="648516" fg:w="920"/><text x="98.5106%" y="158.50"></text></g><g><title>parse_row (multi_file_extractor.py:80) (693 samples, 0.11%)</title><rect x="98.5023%" y="148" width="0.1050%" height="15" fill="rgb(217,147,25)" fg:x="650111" fg:w="693"/><text x="98.7523%" y="158.50"></text></g><g><title>parse_row (multi_file_extractor.py:82) (2,194 samples, 0.33%)</title><rect x="98.6183%" y="148" width="0.3324%" height="15" fill="rgb(247,81,37)" fg:x="650877" fg:w="2194"/><text x="98.8683%" y="158.50"></text></g><g><title>parse_row (multi_file_extractor.py:93) (2,256 samples, 0.34%)</title><rect x="98.9508%" y="148" width="0.3418%" height="15" fill="rgb(209,12,38)" fg:x="653071" fg:w="2256"/><text x="99.2008%" y="158.50"></text></g><g><title>parse_row (multi_file_extractor.py:94) (3,095 samples, 0.47%)</title><rect x="99.2926%" y="148" width="0.4689%" height="15" fill="rgb(227,1,9)" fg:x="655327" fg:w="3095"/><text x="99.5426%" y="158.50"></text></g><g><title>run (threading.py:910) (659,742 samples, 99.96%)</title><rect x="0.0115%" y="100" width="99.9615%" height="15" fill="rgb(248,47,43)" fg:x="76" fg:w="659742"/><text x="0.2615%" y="110.50">run (threading.py:910)</text></g><g><title>_worker (concurrent\futures\thread.py:77) (601,281 samples, 91.10%)</title><rect x="8.8693%" y="116" width="91.1037%" height="15" fill="rgb(221,10,30)" fg:x="58537" fg:w="601281"/><text x="9.1193%" y="126.50">_worker (concurrent\futures\thread.py:77)</text></g><g><title>run (concurrent\futures\thread.py:52) (601,280 samples, 91.10%)</title><rect x="8.8694%" y="132" width="91.1036%" height="15" fill="rgb(210,229,1)" fg:x="58538" fg:w="601280"/><text x="9.1194%" y="142.50">run (concurrent\futures\thread.py:52)</text></g><g><title>parse_row (multi_file_extractor.py:99) (955 samples, 0.14%)</title><rect x="99.8283%" y="148" width="0.1447%" height="15" fill="rgb(222,148,37)" fg:x="658863" fg:w="955"/><text x="100.0783%" y="158.50"></text></g><g><title>all (659,996 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="659996"/><text x="0.2500%" y="62.50"></text></g><g><title>_bootstrap (threading.py:930) (659,921 samples, 99.99%)</title><rect x="0.0114%" y="68" width="99.9886%" height="15" fill="rgb(247,98,35)" fg:x="75" fg:w="659921"/><text x="0.2614%" y="78.50">_bootstrap (threading.py:930)</text></g><g><title>_bootstrap_inner (threading.py:973) (659,920 samples, 99.99%)</title><rect x="0.0115%" y="84" width="99.9885%" height="15" fill="rgb(247,138,52)" fg:x="76" fg:w="659920"/><text x="0.2615%" y="94.50">_bootstrap_inner (threading.py:973)</text></g></svg></svg>